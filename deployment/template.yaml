AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: LD Server Lambda function

Parameters:
  JobServerBucket:
    Type: String
  Environment:
    Type: String
    AllowedValues:
      - qa
      - prod
    Default: qa

Resources:
  LDSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda_build
      Handler: job_server.lambda_handler.handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - sg-28485f53
        SubnetIds:
          - subnet-ab89bbf3
          - subnet-041ed74e61806c6f0
          - subnet-4fe9e572
          - subnet-798ebc21
          - subnet-dc89bb84
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          JOB_SERVER_BUCKET: !Ref JobServerBucket
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource: !Sub 'arn:aws:s3:::dig-ldsc-server-${Environment}/*'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dig-job-server/${Environment}/db-url-*'
            - Effect: Allow
              Action:
                - kms:Decrypt
              Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY


  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}'
      RetentionInDays: 7


  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'Automatic deployment by CloudFormation'

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ServerlessRestApi
      StageName: !Ref Environment



Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
